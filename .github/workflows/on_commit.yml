name: Commit CI/CD # workflow name
on: # trigger
  push:
    branches: [dev, master]
  pull_request:
    types: [opened, reopened, edited]

# parallel jobs to perform
jobs:
  build_test:
    name: Build for test
    runs-on: ubuntu-latest # runner
    if: ${{ (!contains(github.event.head_commit.message, '#notest') && !contains(github.event.head_commit.message, '#nolinuxtest')) || github.ref == 'refs/heads/master' }}
    steps: # tasks
      - name: Set Github Workspace # access Github Workspace
        uses: actions/checkout@v2
      - name: Set up Python 3.10 # set architecture and Python3
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64" # architecture
      - name: Build
        shell: bash
        run: |
          pip install .
          pip install . test

  test:
    name: Run test
    needs: [build_test]
    runs-on: ubuntu-latest # runner
    steps: # tasks
      - name: Set Github Workspace # access Github Workspace
        uses: actions/checkout@v2
      - name: Set up Python 3.10 # set architecture and Python3
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: "x64" # architecture
      - name: Downloads artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - name: Evaluate code quality
        shell: bash
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
      - name: Run unittests
        shell: bash
        run: python tests/test.py
      - name: Print log
        shell: bash
        if: always()
        run: |
          if [ -f test.log ]; then cat test.log; fi